pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}:${getDockerPath()}"
    }

    stages {
        stage ('Sonarcube Scan') {
        steps {
           slackSend (color: '#001aff', message: "Sonarcube Scan: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            // script{
         script {
          scannerHome = tool 'Sonar-inst'
        }
        withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
        withSonarQubeEnv('SonarQubeScanner') {
          sh " ${scannerHome}/bin/sonar-scanner \
          -Dsonar.projectKey=CLixx-App-Adewale \
          -Dsonar.login=${SONAR_TOKEN} "
        }
        }
        }

}

 stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
            }
            }
        }

          stage ('Build Docker Image') {
          steps {
            slackSend (color: '#001aff', message: "Build Docker Image: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            // script{
            //  dockerHome= tool 'docker-inst'
            // }
            //  sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION "
            sh "docker build . -t clixx-image:$VERSION "
          }
        }

  stage ('Starting Docker Image') {
          steps {
             slackSend (color: '#001aff', message: "Starting Docker Image: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
              sh '''
              if ( docker ps|grep clixx-cont ) then
                 echo "Docker image exists, killing it"
                 docker stop clixx-cont
                 docker rm clixx-cont
                 docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION
              else
                 docker run --name clixx-cont  -p 80:80 -d clixx-image:$VERSION 
              fi
              '''
          }
        }

  stage ('Restore CliXX Database') {
          steps {
            slackSend (color: '#001aff', message: "Restore CliXX Database: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
              sh '''
            python3 -m venv python3-virtualenv
            source python3-virtualenv/bin/activate
            python3 -m pip install --upgrade pip
            python3 --version
            pip3 install boto3 botocore boto ansible
            ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml
            deactivate

              '''
          }
        }

  stage ('Configure DB Instance') {
          steps {
            slackSend (color: '#001aff', message: "Configure DB Instance: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
              sh '''
               USERNAME='wordpressuser'
               PASSWORD='W3lcome123'
               DBNAME='wordpressdb'
               SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
               SERVER_INSTANCE='wordpressdbclixxjenkins.cyymdyvt5b4v.us-east-1.rds.amazonaws.com'
               echo "use wordpressdb;" >> $WORKSPACE/db.setup
               echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';">> $WORKSPACE/db.setup
               mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE  -D  $DBNAME < $WORKSPACE/db.setup

              '''
          }
        }

      stage ('Tear Down CliXX Docker Image and Database') {
          steps {
            slackSend (color: '#001aff', message: "Tear Down CliXX Docker Image and Database: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
             script {
                def userInput = input(id: 'confirm', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm'] ])
             }
              sh '''
            python3 -m venv python3-virtualenv
            source python3-virtualenv/bin/activate
            python3 -m pip install --upgrade pip
            python3 --version
            pip3 install boto3 botocore boto ansible
            ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
            deactivate
            docker stop clixx-cont
            docker rm  clixx-cont

              '''
          }
        }

        stage ('Log Into ECR and push the newly created Docker') {
          steps {
            slackSend (color: '#001aff', message: "Log Into ECR and push the newly created Docker: ADEWALE '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
             script {
                def userInput = input(id: 'confirm', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
             }
              sh '''
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 571754706044.dkr.ecr.us-east-1.amazonaws.com/clixx-repository
                docker tag clixx-image:$VERSION 571754706044.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:clixx-image-$VERSION
                docker tag clixx-image:$VERSION 571754706044.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:latest
                docker push 571754706044.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:clixx-image-$VERSION
                docker push 571754706044.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:latest
              '''
          }
        }
    }
}

def getSonarPath(){
        def SonarHome= tool name: 'Sonar-inst', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        return SonarHome
    }
def getDockerPath(){
        def DockerHome= tool name: 'docker-inst', type: 'dockerTool'
        return DockerHome
    }
    

